name: maris-logging-testing CI

permissions:
  checks: write
  contents: read

on:
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/Maris.Logging.Testing/**'
      - 'tests/Maris.Logging.Testing.Tests/**'
      - '.github/workflows/maris-logging-testing.ci.yml'
      - '**/Directory.Build.props'
      - '**/Directory.Package.props'
      - '**/global.json'
      - '**/.editorconfig'
      - '**/stylecop.json'
  workflow_dispatch:

jobs:
  ci:
    name: パッケージのビルドとテスト
  
    strategy:
      fail-fast: false
      matrix:
        vm_image: [ubuntu-latest, windows-latest, macos-latest]
        framework_version: [net472, net8.0, net9.0]
        exclude:
         - vm_image: ubuntu-latest
           framework_version: net472
         - vm_image: macos-latest
           framework_version: net472

    runs-on: ${{ matrix.vm_image }}
   
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      BUILD_CONFIGURATION: Debug
  
    steps:
      - name: ブランチのチェックアウト
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 1
  
      - name: dotnet SDK のセットアップ
        uses: actions/setup-dotnet@d4c94342e560b34958eacfc5d055d21461ed1c5d # v5
        with:
          dotnet-version: |
            8.0.x
            9.0.x
          dotnet-quality: 'ga'

      - name: macOS に GNU sed をインストール
        if: ${{ matrix.vm_image == 'macos-latest' }}
        shell: bash
        run: |
          brew install gsed

      - name: アプリケーションのビルド
        id: application-build
        shell: bash
        continue-on-error: true
        run: |
          echo '## Build Result :gear:' >> $GITHUB_STEP_SUMMARY
          dotnet build src/Maris.Logging.Testing/ --nologo --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity minimal > build-result.txt
          dotnet build tests/Maris.Logging.Testing.Tests/ --nologo --configuration ${{ env.BUILD_CONFIGURATION }} --framework ${{ matrix.framework_version }} --verbosity minimal >> build-result.txt
          echo ':heavy_check_mark: アプリケーションのビルドに成功しました。' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat build-result.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
  
      - name: ビルド失敗時の結果表示
        shell: bash
        if: ${{ steps.application-build.outcome == 'failure' }}
        run: |
          echo ':x: アプリケーションのビルドに失敗しました。  ' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat build-result.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          exit 1
  
      - name: 単体テストの実行
        id: run-unit-test
        shell: bash
        continue-on-error: true
        run: |
          echo '## Test Result :memo:' >> $GITHUB_STEP_SUMMARY
          dotnet test tests/Maris.Logging.Testing.Tests/ --no-build --nologo --verbosity normal --configuration ${{ env.BUILD_CONFIGURATION }} --framework ${{ matrix.framework_version }} -- --coverage --coverage-output-format cobertura --coverage-output coverage.cobertura.xml --report-xunit-trx --report-xunit-trx-filename ${{ matrix.vm_image }}-${{ matrix.framework_version }}.trx

      - id: create-test-result-report
        name: テスト結果ページの作成
        uses: dorny/test-reporter@dc3a92680fcc15842eef52e8c4606ea7ce6bd3f3 # v2
        with:
          name: 'Test results ${{ matrix.framework_version }} on ${{ matrix.vm_image }}'
          path: '**/TestResults/${{ matrix.vm_image }}-${{ matrix.framework_version }}.trx'
          path-replace-backslashes: 'true'
          reporter: 'dotnet-trx'
          only-summary: 'false'
          use-actions-summary: 'true'
          badge-title: 'tests'
          list-suites: 'failed'
          list-tests: 'failed'
          max-annotations: '10'
          fail-on-error: 'false'
          fail-on-empty: 'true'

      - id: create-coverage-report
        name: コードカバレッジレポートの解析
        uses: danielpalme/ReportGenerator-GitHub-Action@c4c5175a441c6603ec614f5084386dabe0e2295b # v5
        with:
          reports: '**/TestResults/coverage.cobertura.xml'
          targetdir: 'CoverageReport'
          reporttypes: 'MarkdownSummaryGithub;TextSummary'
    
      - name: コードカバレッジの結果表示
        shell: bash
        run: |
          if [ "${{ matrix.vm_image }}" = "macos-latest" ]; then
            echo 'export PATH="/opt/homebrew/opt/gnu-sed/libexec/gnubin:$PATH"' >> ~/.bashrc
            source ~/.bashrc
          fi
          echo '## Coverage :triangular_ruler:' >> $GITHUB_STEP_SUMMARY
          sed -i s/'# Summary'/'Coverage report of ${{ matrix.framework_version }} on ${{ matrix.vm_image }}.'/g CoverageReport/SummaryGithub.md
          sed -i -e '/^#/d' CoverageReport/SummaryGithub.md
          cat CoverageReport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
    
      - name: テスト結果のアップロード
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: unit-test-results-${{ matrix.vm_image }}-${{ matrix.framework_version }}
          path: |
            tests/Maris.Logging.Testing.Tests/**/TestResults/
            CoverageReport/Summary.txt
  
      - name: 単体テスト結果の確認
        if: ${{ steps.create-test-result-report.outputs.conclusion == 'failure' }}
        run: exit 1
        