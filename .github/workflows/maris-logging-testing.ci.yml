name: maris-logging-testing CI

on:
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/Maris.Logging.Testing/**'
      - 'tests/Maris.Logging.Testing.Tests/**'
      - '.github/workflows/maris-logging-testing.ci.yml'
      - '**/Directory.Build.props'
      - '**/Directory.Package.props'
      - '**/global.json'
      - '**/.editorconfig'
      - '**/stylecop.json'
  workflow_dispatch:

jobs:
  ci:
    name: パッケージのビルドとテスト
  
    strategy:
      fail-fast: false
      matrix:
        vm_image: [ubuntu-latest, windows-latest, macos-latest]
        framework_version: [net8.0, net9.0]

    runs-on: ${{ matrix.vm_image }}
   
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      BUILD_CONFIGURATION: Debug
  
    steps:
      - name: ブランチのチェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
  
      - name: dotnet SDK のセットアップ
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x
          dotnet-quality: 'ga'

      - name: macOS に GNU sed をインストール
        if: ${{ matrix.vm_image == 'macos-latest' }}
        shell: bash
        run: |
          brew install gsed
          echo "alias sed='gsed'" >> ~/.bashrc
          source ~/.bashrc
          sed --version

      - name: アプリケーションのビルド
        id: application-build
        shell: bash
        continue-on-error: true
        run: |
          echo '## Build Result :gear:' >> $GITHUB_STEP_SUMMARY
          dotnet build src/Maris.Logging.Testing/ --nologo --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity minimal > build-result.txt
          dotnet build tests/Maris.Logging.Testing.Tests/ --nologo --configuration ${{ env.BUILD_CONFIGURATION }} --framework ${{ matrix.framework_version }} --verbosity minimal >> build-result.txt
          echo ':heavy_check_mark: アプリケーションのビルドに成功しました。' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat build-result.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
  
      - name: ビルド失敗時の結果表示
        shell: bash
        if: ${{ steps.application-build.outcome == 'failure' }}
        run: |
          echo ':x: アプリケーションのビルドに失敗しました。  ' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat build-result.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          exit 1
  
      - name: 単体テストの実行
        id: run-unit-test
        shell: bash
        continue-on-error: true
        run: |
          echo '## Test Result :memo:' >> $GITHUB_STEP_SUMMARY
          dotnet test tests/Maris.Logging.Testing.Tests/ --no-build --nologo --verbosity normal --configuration ${{ env.BUILD_CONFIGURATION }} --framework ${{ matrix.framework_version }} -- --coverage --coverage-output-format cobertura --coverage-output coverage.cobertura.xml --report-xunit-trx --report-xunit-trx-filename ${{ matrix.vm_image }}-${{ matrix.framework_version }}.trx > unit-test-result.txt
          echo ':heavy_check_mark: アプリケーションの単体テストに成功しました。' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat unit-test-result.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: 単体テスト失敗時の結果表示
        shell: bash
        if: ${{ steps.run-unit-test.outcome == 'failure' }}
        run: |
          echo ':x: アプリケーションの単体テストに失敗しました。  ' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat unit-test-result.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo 'TEST_STATUS=Error' >> $GITHUB_ENV
    
      - id: create-coverage-report
        name: コードカバレッジレポートの解析
        uses: danielpalme/ReportGenerator-GitHub-Action@5
        with:
          reports: '**/TestResults/coverage.cobertura.xml'
          targetdir: 'CoverageReport'
          reporttypes: 'MarkdownSummaryGithub'
    
      - name: コードカバレッジの結果表示
        shell: bash
        # if: ${{ matrix.vm_image != 'macos-latest' }}
        run: |
          if [ ${{ matrix.vm_image == 'macos-latest' }} ]; then
            echo 'export PATH="/opt/homebrew/opt/gnu-sed/libexec/gnubin:$PATH"' >> ~/.bashrc
          fi
          sed --version
          echo '## Coverage :triangular_ruler:' >> $GITHUB_STEP_SUMMARY
          sed -i s/'# Summary'/'Coverage report of ${{ matrix.framework_version }} on ${{ matrix.vm_image }}.'/g CoverageReport/SummaryGithub.md
          sed -i -e '/^#/d' CoverageReport/SummaryGithub.md
          cat CoverageReport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY

      # - name: コードカバレッジの結果表示
      #   shell: bash
      #   if: ${{ matrix.vm_image == 'macos-latest' }}
      #   run: |
      #     echo '## Coverage :triangular_ruler:' >> $GITHUB_STEP_SUMMARY
      #     gsed -i s/'# Summary'/'Coverage report of ${{ matrix.framework_version }} on ${{ matrix.vm_image }}.'/g CoverageReport/SummaryGithub.md
      #     gsed -i -e '/^#/d' CoverageReport/SummaryGithub.md
      #     cat CoverageReport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
    
      - name: テスト結果のアップロード
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-${{ matrix.vm_image }}-${{ matrix.framework_version }}
          path: tests/Maris.Logging.Testing.Tests/**/TestResults/
          retention-days: 1

      - name: 単体テスト結果の確認
        if: ${{ env.TEST_STATUS == 'Error' }}
        run: exit 1