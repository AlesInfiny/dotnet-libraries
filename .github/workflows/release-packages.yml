name: NuGet パッケージリリース

on:
  push:
    tags: 
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-Beta[0-9]+'

jobs:
  define-matrix:
    runs-on: ubuntu-latest
    outputs:
      packaging_project_name: ${{ steps.matrix.outputs.packaging_project_name }}
    permissions: {}

    steps:
      - name: マトリクスの定義
        id: matrix
        run: |
          echo 'packaging_project_name=["Maris.Logging.Testing"]' >> "$GITHUB_OUTPUT"

  packaging:
    name: パッケージング
    needs: define-matrix
    strategy:
      fail-fast: false
      matrix:
        packaging_project_name: ${{ fromJSON(needs.define-matrix.outputs.packaging_project_name) }}
    runs-on: ubuntu-latest
    env:
      BUILD_CONFIGURATION: Release
    outputs:
      is_pre_release: ${{ steps.setup-variables.outputs.is_pre_release }}
      package_version: ${{ steps.setup-variables.outputs.package_version }}
      file_version: ${{ steps.setup-variables.outputs.file_version }}
    permissions:
      contents: read

    steps:
      - id: setup-variables
        name: 変数の初期化
        run: |
          pre_release=false
          if [[ "${{ github.ref_name }}" == *"Beta"* ]]; then
            pre_release=true
          fi
          echo "is_pre_release:$pre_release"
          echo "is_pre_release=$pre_release" >> $GITHUB_ENV
          echo "is_pre_release=$pre_release" >> $GITHUB_OUTPUT

          package_version="${{ github.ref_name }}"
          echo "package_version:$package_version"
          echo "package_version=$package_version" >> $GITHUB_ENV
          echo "package_version=$package_version" >> $GITHUB_OUTPUT

          file_version=${package_version:1}
          echo "file_version:$file_version"
          echo "file_version=$file_version" >> $GITHUB_ENV
          echo "file_version=$file_version" >> $GITHUB_OUTPUT

      - name: ブランチのチェックアウト
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: dotnet SDK のセットアップ
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x
          dotnet-quality: 'ga'
          
      - name: NuGet パッケージの作成
        run: |
          mkdir ${{ matrix.packaging_project_name }}
          dotnet pack ./src/${{ matrix.packaging_project_name }}/${{ matrix.packaging_project_name }}.csproj --configuration $BUILD_CONFIGURATION --output ${{ matrix.packaging_project_name }} -p:PackageVersion=$file_version -p:Version=$file_version -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg

      - name: ビルドアーティファクトのアップロード
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.packaging_project_name }}
          path: ${{ matrix.packaging_project_name }}/
          retention-days: 3

  release-to-nuget:
    name: NuGet へのリリース
    runs-on: ubuntu-latest
    needs: [define-matrix, packaging]
    strategy:
      fail-fast: false
      matrix:
        packaging_project_name: ${{ fromJSON(needs.define-matrix.outputs.packaging_project_name) }}
    permissions: {}

    steps:
      - name: ビルドアーティファクトのダウンロード
        uses: actions/download-artifact@v5
        with:
          name: ${{ matrix.packaging_project_name }}

      - name: NuGet パッケージの公開
        id: release-to-nuget
        continue-on-error: true
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
          NUGET_SOURCE: https://api.nuget.org/v3/index.json
        run: dotnet nuget push ${{ matrix.packaging_project_name }}.${{ needs.packaging.outputs.file_version }}.nupkg --api-key $NUGET_API_KEY --source $NUGET_SOURCE > nuget_push_log.txt
          
      - name: NuGet パッケージの公開結果表示
        shell: bash
        run: |
          echo "# NuGet release info :toolbox:" >> $GITHUB_STEP_SUMMARY
          cat nuget_push_log.txt >> $GITHUB_STEP_SUMMARY

      - name: NuGet パッケージの公開結果判定
        if: ${{ steps.release-to-nuget.outcome == 'failure' }}
        run: exit 1

  release-to-github:
    name: GitHub へのリリース
    runs-on: ubuntu-latest
    needs: [define-matrix, packaging, release-to-nuget]
    permissions:
      contents: write

    steps:
      - name: ビルドアーティファクトのダウンロード
        uses: actions/download-artifact@v5
      
      - id: create-github-release
        name: GitHub のリリース作成
        uses: softprops/action-gh-release@v2
        with:
          files: |
            **/*.nupkg
            **/*.snupkg
          generate_release_notes: true
          name: "${{ needs.packaging.outputs.package_version }}"
          prerelease: ${{ needs.packaging.outputs.is_pre_release }}
          tag_name: "${{ needs.packaging.outputs.package_version }}"
      
      - name: GitHub のリリース結果表示
        run: |
          echo "Is pre-release:${{ needs.packaging.outputs.is_pre_release }}"
          echo "Package version:${{ needs.packaging.outputs.package_version }}"
          echo "Release page URL:${{ steps.create-github-release.outputs.url }}"
          echo "# GitHub release info :octocat:" >> $GITHUB_STEP_SUMMARY
          echo "Release page URL: <${{ steps.create-github-release.outputs.url }}>" >> $GITHUB_STEP_SUMMARY
